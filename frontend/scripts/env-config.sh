#!/usr/bin/env sh
set -eu

# Unified runtime env -> JS generator
# - Writes a small `window._env_` JS object to `TARGET` (default: `public/env-config.js`).
# - Only reads environment variables (does not source .env files).
# - MODE: `strict` (exit on missing required keys) or `warn` (only print a warning). Default: `warn`.

TARGET=${TARGET:-public/env-config.js}
MODE=${MODE:-warn}

REQUIRED_KEYS="REACT_APP_GOOGLE_CLIENT_ID REACT_APP_API_BASE_URL"

# Check required keys
MISSING=""
for K in $REQUIRED_KEYS; do
  if [ -z "$(printenv "$K" || true)" ]; then
    MISSING="$MISSING $K"
  fi
done

if [ -n "$(echo "$MISSING" | tr -d ' ')" ]; then
  if [ "$MODE" = "strict" ]; then
    echo "ERROR: Missing required environment variable(s):$MISSING" >&2
    echo "The frontend will not start because required runtime variables are missing." >&2
    exit 1
  else
    echo "WARNING: Missing required environment variable(s):$MISSING" >&2
  fi
fi

escape() {
  # escape backslashes, double quotes and convert newlines to literal \n
  printf '%s' "$1" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e ':a;N;$!ba;s/\n/\\n/g'
}

mkdir -p "$(dirname "$TARGET")" || true

{
  echo "// This file is generated by 'env-config.sh'. Do not commit."
  echo "window._env_ = {"

  # Emit all REACT_APP_* env vars (only when non-empty)
  env | awk -F= '/^REACT_APP_/ {print $1}' | while read -r NAME; do
    VAL=$(printenv "$NAME" || true)
    if [ -n "$VAL" ]; then
      VAL_ESC=$(escape "$VAL")
      printf '  "%s": "%s"\n' "$NAME" "$VAL_ESC"
    fi
  done | sed '$!s/$/,/'

  echo "};"

} > "$TARGET"

# If used as a container entrypoint, exec the passed command (e.g. nginx)
if [ "$#" -gt 0 ]; then
  exec "$@"
fi

exit 0
